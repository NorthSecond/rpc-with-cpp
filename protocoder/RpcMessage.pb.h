// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RpcMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RpcMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RpcMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RpcMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RpcMessage_2eproto;
namespace rpcDemo {
class RpcMessage;
struct RpcMessageDefaultTypeInternal;
extern RpcMessageDefaultTypeInternal _RpcMessage_default_instance_;
}  // namespace rpcDemo
PROTOBUF_NAMESPACE_OPEN
template<> ::rpcDemo::RpcMessage* Arena::CreateMaybeMessage<::rpcDemo::RpcMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rpcDemo {

enum MsgType : int {
  REQUEST = 0,
  RESPONSE = 1,
  ERROR = 2,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = REQUEST;
constexpr MsgType MsgType_MAX = ERROR;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum ErrorCode : int {
  NO_ERROR = 0,
  WRONG_PROTO = 1,
  NO_SERVICE = 2,
  NO_METHOD = 3,
  INVALID_REQUEST = 4,
  INVALID_RESPONSE = 5,
  TIMEOUT = 6,
  PENDDING_LIMIT = 7,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = NO_ERROR;
constexpr ErrorCode ErrorCode_MAX = PENDDING_LIMIT;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class RpcMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpcDemo.RpcMessage) */ {
 public:
  inline RpcMessage() : RpcMessage(nullptr) {}
  ~RpcMessage() override;
  explicit constexpr RpcMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcMessage(const RpcMessage& from);
  RpcMessage(RpcMessage&& from) noexcept
    : RpcMessage() {
    *this = ::std::move(from);
  }

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMessage& operator=(RpcMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcMessage* internal_default_instance() {
    return reinterpret_cast<const RpcMessage*>(
               &_RpcMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcMessage& a, RpcMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpcDemo.RpcMessage";
  }
  protected:
  explicit RpcMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 5,
    kResponseFieldNumber = 6,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 1,
    kServiceIdFieldNumber = 3,
    kMethodIdFieldNumber = 4,
    kErrorFieldNumber = 7,
  };
  // bytes request = 5;
  void clear_request();
  const std::string& request() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request();
  PROTOBUF_NODISCARD std::string* release_request();
  void set_allocated_request(std::string* request);
  private:
  const std::string& _internal_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request(const std::string& value);
  std::string* _internal_mutable_request();
  public:

  // bytes response = 6;
  void clear_response();
  const std::string& response() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response();
  PROTOBUF_NODISCARD std::string* release_response();
  void set_allocated_response(std::string* response);
  private:
  const std::string& _internal_response() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // int64 id = 2;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // .rpcDemo.MsgType type = 1;
  void clear_type();
  ::rpcDemo::MsgType type() const;
  void set_type(::rpcDemo::MsgType value);
  private:
  ::rpcDemo::MsgType _internal_type() const;
  void _internal_set_type(::rpcDemo::MsgType value);
  public:

  // uint32 serviceId = 3;
  void clear_serviceid();
  uint32_t serviceid() const;
  void set_serviceid(uint32_t value);
  private:
  uint32_t _internal_serviceid() const;
  void _internal_set_serviceid(uint32_t value);
  public:

  // uint32 methodId = 4;
  void clear_methodid();
  uint32_t methodid() const;
  void set_methodid(uint32_t value);
  private:
  uint32_t _internal_methodid() const;
  void _internal_set_methodid(uint32_t value);
  public:

  // .rpcDemo.ErrorCode error = 7;
  void clear_error();
  ::rpcDemo::ErrorCode error() const;
  void set_error(::rpcDemo::ErrorCode value);
  private:
  ::rpcDemo::ErrorCode _internal_error() const;
  void _internal_set_error(::rpcDemo::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:rpcDemo.RpcMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  int64_t id_;
  int type_;
  uint32_t serviceid_;
  uint32_t methodid_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RpcMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcMessage

// .rpcDemo.MsgType type = 1;
inline void RpcMessage::clear_type() {
  type_ = 0;
}
inline ::rpcDemo::MsgType RpcMessage::_internal_type() const {
  return static_cast< ::rpcDemo::MsgType >(type_);
}
inline ::rpcDemo::MsgType RpcMessage::type() const {
  // @@protoc_insertion_point(field_get:rpcDemo.RpcMessage.type)
  return _internal_type();
}
inline void RpcMessage::_internal_set_type(::rpcDemo::MsgType value) {
  
  type_ = value;
}
inline void RpcMessage::set_type(::rpcDemo::MsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:rpcDemo.RpcMessage.type)
}

// int64 id = 2;
inline void RpcMessage::clear_id() {
  id_ = int64_t{0};
}
inline int64_t RpcMessage::_internal_id() const {
  return id_;
}
inline int64_t RpcMessage::id() const {
  // @@protoc_insertion_point(field_get:rpcDemo.RpcMessage.id)
  return _internal_id();
}
inline void RpcMessage::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void RpcMessage::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:rpcDemo.RpcMessage.id)
}

// uint32 serviceId = 3;
inline void RpcMessage::clear_serviceid() {
  serviceid_ = 0u;
}
inline uint32_t RpcMessage::_internal_serviceid() const {
  return serviceid_;
}
inline uint32_t RpcMessage::serviceid() const {
  // @@protoc_insertion_point(field_get:rpcDemo.RpcMessage.serviceId)
  return _internal_serviceid();
}
inline void RpcMessage::_internal_set_serviceid(uint32_t value) {
  
  serviceid_ = value;
}
inline void RpcMessage::set_serviceid(uint32_t value) {
  _internal_set_serviceid(value);
  // @@protoc_insertion_point(field_set:rpcDemo.RpcMessage.serviceId)
}

// uint32 methodId = 4;
inline void RpcMessage::clear_methodid() {
  methodid_ = 0u;
}
inline uint32_t RpcMessage::_internal_methodid() const {
  return methodid_;
}
inline uint32_t RpcMessage::methodid() const {
  // @@protoc_insertion_point(field_get:rpcDemo.RpcMessage.methodId)
  return _internal_methodid();
}
inline void RpcMessage::_internal_set_methodid(uint32_t value) {
  
  methodid_ = value;
}
inline void RpcMessage::set_methodid(uint32_t value) {
  _internal_set_methodid(value);
  // @@protoc_insertion_point(field_set:rpcDemo.RpcMessage.methodId)
}

// bytes request = 5;
inline void RpcMessage::clear_request() {
  request_.ClearToEmpty();
}
inline const std::string& RpcMessage::request() const {
  // @@protoc_insertion_point(field_get:rpcDemo.RpcMessage.request)
  return _internal_request();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMessage::set_request(ArgT0&& arg0, ArgT... args) {
 
 request_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rpcDemo.RpcMessage.request)
}
inline std::string* RpcMessage::mutable_request() {
  std::string* _s = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:rpcDemo.RpcMessage.request)
  return _s;
}
inline const std::string& RpcMessage::_internal_request() const {
  return request_.Get();
}
inline void RpcMessage::_internal_set_request(const std::string& value) {
  
  request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_request() {
  
  return request_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcMessage::release_request() {
  // @@protoc_insertion_point(field_release:rpcDemo.RpcMessage.request)
  return request_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcMessage::set_allocated_request(std::string* request) {
  if (request != nullptr) {
    
  } else {
    
  }
  request_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpcDemo.RpcMessage.request)
}

// bytes response = 6;
inline void RpcMessage::clear_response() {
  response_.ClearToEmpty();
}
inline const std::string& RpcMessage::response() const {
  // @@protoc_insertion_point(field_get:rpcDemo.RpcMessage.response)
  return _internal_response();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMessage::set_response(ArgT0&& arg0, ArgT... args) {
 
 response_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rpcDemo.RpcMessage.response)
}
inline std::string* RpcMessage::mutable_response() {
  std::string* _s = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:rpcDemo.RpcMessage.response)
  return _s;
}
inline const std::string& RpcMessage::_internal_response() const {
  return response_.Get();
}
inline void RpcMessage::_internal_set_response(const std::string& value) {
  
  response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_response() {
  
  return response_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcMessage::release_response() {
  // @@protoc_insertion_point(field_release:rpcDemo.RpcMessage.response)
  return response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcMessage::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (response_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpcDemo.RpcMessage.response)
}

// .rpcDemo.ErrorCode error = 7;
inline void RpcMessage::clear_error() {
  error_ = 0;
}
inline ::rpcDemo::ErrorCode RpcMessage::_internal_error() const {
  return static_cast< ::rpcDemo::ErrorCode >(error_);
}
inline ::rpcDemo::ErrorCode RpcMessage::error() const {
  // @@protoc_insertion_point(field_get:rpcDemo.RpcMessage.error)
  return _internal_error();
}
inline void RpcMessage::_internal_set_error(::rpcDemo::ErrorCode value) {
  
  error_ = value;
}
inline void RpcMessage::set_error(::rpcDemo::ErrorCode value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:rpcDemo.RpcMessage.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcDemo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rpcDemo::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpcDemo::MsgType>() {
  return ::rpcDemo::MsgType_descriptor();
}
template <> struct is_proto_enum< ::rpcDemo::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpcDemo::ErrorCode>() {
  return ::rpcDemo::ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RpcMessage_2eproto
