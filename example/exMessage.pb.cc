// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exMessage.proto

#include "exMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rpcExample {
PROTOBUF_CONSTEXPR request::request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a_)*/int64_t{0}
  , /*decltype(_impl_.b_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~requestDefaultTypeInternal() {}
  union {
    request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 requestDefaultTypeInternal _request_default_instance_;
PROTOBUF_CONSTEXPR result::result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.c_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct resultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR resultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~resultDefaultTypeInternal() {}
  union {
    result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 resultDefaultTypeInternal _result_default_instance_;
}  // namespace rpcExample
static ::_pb::Metadata file_level_metadata_exMessage_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_exMessage_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_exMessage_2eproto[1];

const uint32_t TableStruct_exMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpcExample::request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpcExample::request, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::rpcExample::request, _impl_.b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpcExample::result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpcExample::result, _impl_.c_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rpcExample::request)},
  { 8, -1, -1, sizeof(::rpcExample::result)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rpcExample::_request_default_instance_._instance,
  &::rpcExample::_result_default_instance_._instance,
};

const char descriptor_table_protodef_exMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017exMessage.proto\022\nrpcExample\"\037\n\007request"
  "\022\t\n\001a\030\001 \001(\003\022\t\n\001b\030\002 \001(\003\"\023\n\006result\022\t\n\001c\030\001 "
  "\001(\0032i\n\007Service\022.\n\003Add\022\023.rpcExample.reque"
  "st\032\022.rpcExample.result\022.\n\003sub\022\023.rpcExamp"
  "le.request\032\022.rpcExample.resultB\003\200\001\001b\006pro"
  "to3"
  ;
static ::_pbi::once_flag descriptor_table_exMessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_exMessage_2eproto = {
    false, false, 203, descriptor_table_protodef_exMessage_2eproto,
    "exMessage.proto",
    &descriptor_table_exMessage_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_exMessage_2eproto::offsets,
    file_level_metadata_exMessage_2eproto, file_level_enum_descriptors_exMessage_2eproto,
    file_level_service_descriptors_exMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_exMessage_2eproto_getter() {
  return &descriptor_table_exMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_exMessage_2eproto(&descriptor_table_exMessage_2eproto);
namespace rpcExample {

// ===================================================================

class request::_Internal {
 public:
};

request::request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpcExample.request)
}
request::request(const request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a_){}
    , decltype(_impl_.b_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a_, &from._impl_.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.b_) -
    reinterpret_cast<char*>(&_impl_.a_)) + sizeof(_impl_.b_));
  // @@protoc_insertion_point(copy_constructor:rpcExample.request)
}

inline void request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a_){int64_t{0}}
    , decltype(_impl_.b_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

request::~request() {
  // @@protoc_insertion_point(destructor:rpcExample.request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void request::Clear() {
// @@protoc_insertion_point(message_clear_start:rpcExample.request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.b_) -
      reinterpret_cast<char*>(&_impl_.a_)) + sizeof(_impl_.b_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpcExample.request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 a = 1;
  if (this->_internal_a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_a(), target);
  }

  // int64 b = 2;
  if (this->_internal_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpcExample.request)
  return target;
}

size_t request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpcExample.request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 a = 1;
  if (this->_internal_a() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_a());
  }

  // int64 b = 2;
  if (this->_internal_b() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_b());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*request::GetClassData() const { return &_class_data_; }


void request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<request*>(&to_msg);
  auto& from = static_cast<const request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpcExample.request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a() != 0) {
    _this->_internal_set_a(from._internal_a());
  }
  if (from._internal_b() != 0) {
    _this->_internal_set_b(from._internal_b());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void request::CopyFrom(const request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpcExample.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request::IsInitialized() const {
  return true;
}

void request::InternalSwap(request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(request, _impl_.b_)
      + sizeof(request::_impl_.b_)
      - PROTOBUF_FIELD_OFFSET(request, _impl_.a_)>(
          reinterpret_cast<char*>(&_impl_.a_),
          reinterpret_cast<char*>(&other->_impl_.a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exMessage_2eproto_getter, &descriptor_table_exMessage_2eproto_once,
      file_level_metadata_exMessage_2eproto[0]);
}

// ===================================================================

class result::_Internal {
 public:
};

result::result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpcExample.result)
}
result::result(const result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.c_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.c_ = from._impl_.c_;
  // @@protoc_insertion_point(copy_constructor:rpcExample.result)
}

inline void result::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.c_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

result::~result() {
  // @@protoc_insertion_point(destructor:rpcExample.result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void result::Clear() {
// @@protoc_insertion_point(message_clear_start:rpcExample.result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.c_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpcExample.result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 c = 1;
  if (this->_internal_c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpcExample.result)
  return target;
}

size_t result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpcExample.result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 c = 1;
  if (this->_internal_c() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_c());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*result::GetClassData() const { return &_class_data_; }


void result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<result*>(&to_msg);
  auto& from = static_cast<const result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpcExample.result)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_c() != 0) {
    _this->_internal_set_c(from._internal_c());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void result::CopyFrom(const result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpcExample.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool result::IsInitialized() const {
  return true;
}

void result::InternalSwap(result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.c_, other->_impl_.c_);
}

::PROTOBUF_NAMESPACE_ID::Metadata result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exMessage_2eproto_getter, &descriptor_table_exMessage_2eproto_once,
      file_level_metadata_exMessage_2eproto[1]);
}

// ===================================================================

Service::~Service() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Service::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_exMessage_2eproto);
  return file_level_service_descriptors_exMessage_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Service::GetDescriptor() {
  return descriptor();
}

void Service::Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::rpcExample::request*,
                         ::rpcExample::result*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Add() not implemented.");
  done->Run();
}

void Service::sub(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::rpcExample::request*,
                         ::rpcExample::result*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method sub() not implemented.");
  done->Run();
}

void Service::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_exMessage_2eproto[0]);
  switch(method->index()) {
    case 0:
      Add(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::rpcExample::request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::rpcExample::result*>(
                 response),
             done);
      break;
    case 1:
      sub(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::rpcExample::request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::rpcExample::result*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Service::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rpcExample::request::default_instance();
    case 1:
      return ::rpcExample::request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Service::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rpcExample::result::default_instance();
    case 1:
      return ::rpcExample::result::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Service_Stub::Service_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Service_Stub::Service_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Service_Stub::~Service_Stub() {
  if (owns_channel_) delete channel_;
}

void Service_Stub::Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::rpcExample::request* request,
                              ::rpcExample::result* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Service_Stub::sub(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::rpcExample::request* request,
                              ::rpcExample::result* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpcExample
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rpcExample::request*
Arena::CreateMaybeMessage< ::rpcExample::request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpcExample::request >(arena);
}
template<> PROTOBUF_NOINLINE ::rpcExample::result*
Arena::CreateMaybeMessage< ::rpcExample::result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpcExample::result >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
